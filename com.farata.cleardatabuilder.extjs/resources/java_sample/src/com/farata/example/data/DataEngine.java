package com.farata.example.data;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.NoSuchElementException;import com.farata.example.dto.AssociateDTO;import com.farata.example.dto.CompanyDTO;public class DataEngine {	private DataEngine() {		initializeCompanies();		initializeCompanyAssociates();	}		private static DataEngine _instance;	public static DataEngine getInstance(){		if (_instance==null) {			_instance = new DataEngine();		}		return _instance;	}	/*	 * companyList is rudimentary entity: only single thread is supposed to access it,	 * it serves only for illustration of the ChangeObject mechanics	 */	private  ArrayList<CompanyDTO> companyList;	@SuppressWarnings("serial")	private  void initializeCompanies() {		companyList = new ArrayList<CompanyDTO>() {			public boolean add(CompanyDTO dto) {				if ((dto==null) || (dto.id==null)) return false; 				ArrayList<AssociateDTO> associateList = new ArrayList<AssociateDTO>();				if (companyAssociateMap == null) {					companyAssociateMap = new HashMap<Integer, ArrayList<AssociateDTO>>();				}				companyAssociateMap.put(dto.id, associateList);								return super.add(dto);			}			public CompanyDTO remove(int index) {				CompanyDTO dto = super.remove(index);				if (dto.id!=null) {					companyAssociateMap.remove(dto.id);				}				return dto;			}		};		CompanyDTO dto = new CompanyDTO();		dto.companyName = "FarataSystems";		dto.id = 1;		companyList.add(dto);		dto = new CompanyDTO();		dto.companyName = "Sencha";		dto.id = 2;		companyList.add(dto);	}		public List<CompanyDTO> getCompanyList()  {				List<CompanyDTO> list = new ArrayList<CompanyDTO>(companyList);		return list;	}		public void addCompany(CompanyDTO company) {		companyList.add(company);	}	public CompanyDTO findCompany(Integer id) {		CompanyDTO companyDTO = null;			for (int i=0; i< companyList.size(); i++) {			CompanyDTO listDTO = companyList.get(i) ;			if (listDTO.id.compareTo(id)==0) {				companyDTO = listDTO; 				break;			}			}		return companyDTO;	}		public CompanyDTO findCompany(CompanyDTO dto) {		return findCompany(dto.id);	}		public CompanyDTO removeCompany(Integer id) {		CompanyDTO removed = null;		for (int i=0; i< companyList.size(); i++) {			CompanyDTO listDTO = companyList.get(i) ;			if (listDTO.id.compareTo(id)==0) {				removed = companyList.remove(i);				break;			}			}		return removed;	}		public CompanyDTO removeCompany(CompanyDTO dto) {		return removeCompany(dto.id);	}	public Integer getMaxCompanyId() {		int maxId=0;		try {			CompanyDTO max = (CompanyDTO)Collections.max(companyList, new CompanyIdComparator());			maxId = max.id;    	} catch (NoSuchElementException nsee) {     		// default to 0      	}    	return new Integer(maxId);	}	class CompanyIdComparator implements Comparator<CompanyDTO> {		@Override		public int compare(CompanyDTO o1, CompanyDTO o2) {			return o1.id.compareTo(o2.id);		}	}	/*	 * companyAssociateMap is rudimentary support of one to many company-associate	 * relationship, only single thread is supposed to access it,	 * it serves only for illustration of the ChangeObject mechanics	 */	private  Map<Integer, ArrayList<AssociateDTO>> companyAssociateMap;	private void initializeCompanyAssociates() {		//Farata Associates				Integer companyId = new Integer(1);				ArrayList<AssociateDTO> associateList = companyAssociateMap.get(companyId);				AssociateDTO dto = new AssociateDTO();		dto.associateName = "Yakov Fain";		dto.companyId = companyId;		dto.id = 1;		associateList.add(dto);			dto = new AssociateDTO();		dto.associateName = "Anatole Tartakovsky";		dto.companyId = companyId;		dto.id = 2;		associateList.add(dto);				dto = new AssociateDTO();		dto.associateName = "Victor Rasputnis";		dto.companyId = companyId;		dto.id = 3;		associateList.add(dto);				//Sencha Team Associates		companyId = new Integer(2);		associateList = companyAssociateMap.get(companyId);				dto = new AssociateDTO();		dto.associateName = "Ed Spenser";		dto.companyId = companyId;		dto.id = 4;		associateList.add(dto);		dto = new AssociateDTO();		dto.associateName = "Ted Patrick";		dto.companyId = companyId;		dto.id = 5;		associateList.add(dto);	}	public List<AssociateDTO> getAssociateList(Integer companyId) {		if (companyId==null) throw new RuntimeException("companyId can not be null");				List<AssociateDTO> associateList = companyAssociateMap.get(companyId);		if (associateList==null) associateList = new ArrayList<AssociateDTO>();		return associateList;			}		public AssociateDTO findAssociate(AssociateDTO dto) {		AssociateDTO targetDTO=null;		Integer companyId = dto.companyId;		if (companyId == null) throw new RuntimeException("companyId can not be null");		List<AssociateDTO> associateList = companyAssociateMap.get(companyId);		if (associateList != null) {	        for (AssociateDTO listDTO: associateList) {	        	if (listDTO.id.compareTo(dto.id)==0) {	        		targetDTO = listDTO; 	        		break;	        	}		        }		}		return targetDTO;	}		public AssociateDTO removeAssociate(AssociateDTO dto) {		AssociateDTO removedDTO=null;		Integer companyId = dto.companyId;		if (companyId == null) throw new RuntimeException("companyId can not be null");		List<AssociateDTO> associateList = companyAssociateMap.get(companyId);		if (associateList!=null) {			for (AssociateDTO listDTO: associateList) {								if (listDTO.id.compareTo(dto.id)==0) {					associateList.remove(listDTO);					removedDTO = listDTO; 					break;				}				}		}		return removedDTO;	}	@SuppressWarnings("unchecked")	public Integer getMaxCompanyAssociateId () {		int maxId=0;	    Iterator it = companyAssociateMap.entrySet().iterator();	    while (it.hasNext()) {	        Map.Entry pairs = (Map.Entry)it.next();	        ArrayList<AssociateDTO> partialList = (ArrayList<AssociateDTO>) pairs.getValue();	        try {		        AssociateDTO maxDTO = (AssociateDTO)Collections.max(partialList, new AssociateIdComparator());		        if (maxDTO.id > maxId) maxId = maxDTO.id;	    	} catch (NoSuchElementException nsee) { 	    		// default to 0  	    	}	    }	    return new Integer(maxId);	}	class AssociateIdComparator implements Comparator<AssociateDTO> {		@Override		public int compare(AssociateDTO o1, AssociateDTO o2) {			return o1.id.compareTo(o2.id);		}	}}